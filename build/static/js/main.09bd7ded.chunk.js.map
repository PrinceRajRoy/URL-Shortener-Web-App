{"version":3,"sources":["config/fbconfig.js","Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","login","e","preventDefault","email","document","getElementById","value","pass","auth","signInWithEmailAndPassword","catch","err","createUserWithEmailAndPassword","then","localStorage","setItem","bind","className","id","onSubmit","this","placeholder","type","React","Component","db","firestore","App","Query","style","display","innerHTML","user","getItem","ogURL","collection","doc","get","snapshot","exists","rnd","Math","floor","random","URL","generateURL","console","log","set","shortURL","merge","fetch","num","temp","login1","x","logout","signOut","state","name","urls","vis","onAuthStateChanged","setState","generatedURLS","val","data","docs","forEach","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09bd7ded.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyB7RORvCfqyVLhtaD-5sQhYPhxi6zPrU5E\",\r\n  authDomain: \"link-shortener-2f25c.firebaseapp.com\",\r\n  databaseURL: \"https://link-shortener-2f25c.firebaseio.com\",\r\n  projectId: \"link-shortener-2f25c\",\r\n  storageBucket: \"link-shortener-2f25c.appspot.com\",\r\n  messagingSenderId: \"912255930230\",\r\n  appId: \"1:912255930230:web:7231f0c1cfd94cc3873457\"\r\n};\r\n\r\nexport default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();\r\n","import React from 'react';\r\nimport './Login.css'\r\nimport firebase from '../config/fbconfig';\r\nimport 'firebase/auth';\r\n\r\nclass Login extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n  }\r\n\r\n  login = e => {\r\n    e.preventDefault();\r\n    var email = document.getElementById(\"email\").value;\r\n    var pass = document.getElementById(\"pass\").value;\r\n    firebase.auth().signInWithEmailAndPassword(email, pass).catch(err => {\r\n      firebase.auth().createUserWithEmailAndPassword(email, pass).then(() => localStorage.setItem(\"user\", email));\r\n    }).then(() => localStorage.setItem(\"user\", email));\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"Login\" id=\"loginForm\">\r\n        <form className=\"text-center\" onSubmit={this.login}>\r\n          <input className=\"form-control\" placeholder=\"Email\" type=\"text\" id=\"email\"/>\r\n          <input className=\"form-control\" placeholder=\"Password\" type=\"password\" id=\"pass\"/>\r\n          <span id=\"log\">Password Should Be atleast 6 letters</span>\r\n          <button className=\"btn btn-success\">Login</button><br/>\r\n          {/*<span id=\"err\">User Not Registered Previously, Registering Now</span>*/}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport './App.css';\nimport firebase from './config/fbconfig';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport Login from './Login/Login';\n\nconst db = firebase.firestore();\n\nclass App extends React.Component {\n  \n\n  Query = e => {\n    e.preventDefault();\n    document.getElementById(\"err\").style.display = \"none\";\n    document.getElementById(\"result\").innerHTML = \"\";\n    var user = localStorage.getItem(\"user\");\n    var ogURL = document.getElementById(\"string\").value;\n    db.collection(user).doc(ogURL).get().then((snapshot) => {\n        if(snapshot.exists){\n          if(user != null)\n          document.getElementById(\"err\").style.display = \"block\";\n        }\n        else{\n            //For considering both capital and small letters\n            var temp = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n            var rnd = Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000;\n            var URL = 'https://heroku.com/' + this.generateURL(rnd, temp);\n\n            document.getElementById(\"result\").innerHTML = \"Generated URL : \" + URL;\n            console.log(user);\n            db.collection(user).doc(ogURL).set({\n              shortURL: URL\n            }, {merge: true});\n            this.fetch();\n        }\n    });\n  }\n\n  //\n  generateURL = (num, temp) => {\n    if(num === 0)\n      return '';\n    else\n      return this.generateURL(Math.floor(num/62), temp) + temp[num % 62];\n  }\n\n  login1 = () => {\n    var x = document.getElementById(\"loginForm\").style.display;\n    console.log(x);\n    if(x === \"block\")\n        document.getElementById(\"loginForm\").style.display = \"none\";\n    else\n        document.getElementById(\"loginForm\").style.display = \"block\";\n  }\n\n  logout = () => {\n    firebase.auth().signOut().then(() => {\n      console.log(\"Successfully Logged Out\");\n    })\n  }\n\n  state = {\n    name: \"ABC\",\n    urls: []\n  }\n\n  vis = firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      this.setState({\n        name: user.email\n      });\n      document.getElementById(\"loginForm\").style.display = \"none\";\n      document.getElementById(\"login\").style.display = \"none\";\n      document.getElementById(\"loggedin\").style.display = \"block\";\n      this.fetch();\n    } else {\n      document.getElementById(\"login\").style.display = \"block\";\n      document.getElementById(\"loggedin\").style.display = \"none\";\n    }\n  });\n\n  generatedURLS = (val) => {\n    document.getElementById(\"mainBody\").style.display = val ? \"none\" : \"block\";\n    document.getElementById(\"urlButton\").style.display = val ? \"none\" : \"block\";\n    document.getElementById(\"homeButton\").style.display = val ? \"block\" : \"none\";\n    document.getElementById(\"Urls\").style.display = val ? \"block\" : \"none\";\n  }\n\n  fetch = () => {\n    this.setState({urls: []});\n    var user = localStorage.getItem(\"user\");\n    db.collection(user).get().then(data => {\n      data.docs.forEach(doc => {\n        console.log(doc.data(), doc.id)\n        this.setState({\n          urls: [...this.state.urls, <li className=\"list-group-item\">{doc.id} : {doc.data()['shortURL']}</li>]\n        })\n      })\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header id=\"header\">\n          <div id=\"loggedin\" onClick={() => this.logout()}>\n            <span id=\"name\">{this.state.name}</span>\n            <i className=\"fa fa-sign-out\"></i>\n          </div>\n          <div id=\"login\" onClick={() => this.login1()}>\n            <span>Login</span>\n            <i className=\"fa fa-sign-in\"></i>\n          </div>\n        </header>\n        <Login />\n        <div className=\"container\" id=\"mainBody\">\n          <div className=\"row\">\n            <form className=\"offset-md-1 col-md-6 text-center\" id=\"Main\"  onSubmit={this.Query}>\n                <input type=\"text\" className=\"form-control\" id=\"string\"/>\n                <button className=\"btn btn-primary\">Submit</button><br/>\n                <div id=\"result\"></div>\n                <span id=\"err\">URL exists! Please Enter Another</span>\n            </form>\n            <div className=\"offset-md-1 col-md-4 text-center\" id=\"links\">\n                Generated Urls\n                {this.state.urls}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}